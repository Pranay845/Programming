// You can create partial Sass files that contain little snippets of CSS that you can include in other Sass files. 
// This is a great way to modularize your CSS and help keep things easier to maintain. 
// A partial is a Sass file named with a leading underscore. 
// You might name it something like _partial.scss. 
// The underscore lets Sass know that the file is only a partial file and that it should not be generated into a CSS file. 
// Sass partials are used with the @import rule. 
// We need not specify the extension or the underscore for importing partials 
// We can use partials to separate major components especially
// You don't need to write @import each time you import a partial. You can simply add a comma and continue on the same line.
@import './resets', './variables';


// Functions in sass are like functions in javascript
@function weight($weight-name){
    @return map-get($font-weights, $weight-name);
}

// Although mixins and functions are very similar, functions should be used to compute and return values but mixins are used for defining styles and reusing them by @include.
@mixin flexcenter($direction) {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: $direction;
}

// We can assign boolean values to variables.
// We canalso use if statements in mixins.
@mixin theme ($light-theme: true) {
    @if $light-theme{
        background: lighten($primary-color, 100%);
        color: darken($text-color, 100%);
    }
    
}

// we use @content to tell sass it this is a placeholder for css properties which will be passed when the mixin is called
@mixin mobile {
    @media (max-width: $mobile) {
       @content;   
    }
}

body{
    background-color: $primary-color;
    color: $text-color;
}

// Nesting is one of the best features in sass.
// In nesting we nest properties for a child of a parent like p and div 
// & is used for replacing the parent name in selectors to reduce redundency in code
// We use interpolation to tell sass that include everything before the child in child's selector while using nesting
// You can nest properties inside properties for multiple levels
.main{
    @include flexcenter(column);

    // In sass we have math operators but we cannot use them calculate different types of values like percentages and pixels. The operands should be of the same type. Also we can use calc from css to calculate different types of values.
    width: 80% - 20%;
    margin: 0 auto;

    #{&}_para1{
        font-weight: weight(bold);

        &:hover{
            color: $accent-color;
        }
        
    }

    // We use @extend to tell Sass that one selector should inherit the styles of another selector. Itâ€™s written @extend <selector which should be inherited>. It is like inheritance in javascript
    #{&}_para2{
        @extend .main_para1;

        &:hover{
            color: red;
        }
        
    }

    @include mobile(){
        flex-direction: row;
    }
}

.light{
    @include theme($light-theme: true);
}
